// Alunos: João Paulo Candido da Costa
//         Miguel Falcão Costacurta
//         Pedro Massaki Carnelossi
// Software de criptografia de Dados de login (Usuário e senha) desenvolvido
// pelos alunos citados acima utilizando-se da criptografia cifras de césar somando da tabela ASCII
// o caracter mais 5 posições à frente.


#include <conio.c>
#include <stdio.h>
#include <string.h>
#include <locale.h>
#include <ctype.h>
#include <windows.h>

void arquivo(int tp);
void descriptografia(char *s);
void criptografia(char *s);
void janela(const char msg[20], int ci, int li, int cf, int lf, int corL, int corF);
void limpa(int ci, int li, int cf, int lf);
void login();
void menuAdmin();
void menuUser();
void regUsuario();
bool validaSenha(char s[20]);
void listar(int tp);
void alterarUsuarioSenha(int tp);
void excluiUsuario(char cadastro[20][3][20], int *total_cadastros, char usuarioLogado[21], int tipoUsuario);
void creditos();

int op, total_cadastros, totuser;
char cadastro[20][3][20];
char user[21], senha[21];

int main(){
	arquivo(0);
	login();
	
	return 0;
}

// Função para criptografar usando a cifra de César
void criptografia(char *str) {
    int deslocamento = 5; // Deslocamento fixo de 5
    for (int i = 0; str[i] != '\0'; i++) {
        str[i] += deslocamento; // Desloca o caractere
    }
}

// Função para descriptografar usando a cifra de César
void descriptografia(char *str) {
    int deslocamento = 5; // Deslocamento fixo de 5
    for (int i = 0; str[i] != '\0'; i++) {
        str[i] -= deslocamento; // Desloca o caractere de volta
    }
}

void arquivo(int tp){ // 0 - leitura / 1 - gravacao
    char linha[20];
    int x;
    FILE *file;

    // Se for leitura
    if (tp == 0) {
        file = fopen("NomeArq.txt", "r");
        if (file != NULL) { 
            total_cadastros = 0;
            x = 0;

            while (fgets(linha, sizeof(linha), file) != NULL) {
                linha[strlen(linha) - 1] = '\0'; // Remove a nova linha
			
                if (x % 3 == 0) { // /3 (nome)
                	descriptografia(linha);
                    strcpy(cadastro[total_cadastros][0], linha);
                } else if(x%3 == 1) { // resto 1 (senha)
                    descriptografia(linha);
					strcpy(cadastro[total_cadastros][1], linha);
                } else if(x%3 == 2){
                	strcpy(cadastro[total_cadastros][2], linha);
					total_cadastros++; // Incrementa após salvar o tipo
				}
                x++; // Incrementa para alternar entre nome, senha e tipo
            }

            fclose(file);
        } else {
            // Cria o arquivo caso ele não exista
            file = fopen("NomeArq.txt", "w");
            fclose(file);
        }
    } 
    // Se for gravação
    else if (tp == 1) { 
        file = fopen("NomeArq.txt", "w");
        for (x = 0; x < total_cadastros; x++) {
        	strcpy(linha, cadastro[x][0]);
        	criptografia(linha);
            fprintf(file, "%s\n", linha); // Grava o nome
            
            strcpy(linha, cadastro[x][1]);
        	criptografia(linha);
			fprintf(file, "%s\n", linha); // Grava a senha
        
			strcpy(linha, cadastro[x][2]);
			fprintf(file,"%s\n", linha); // Grava o tipo
		}
        fclose(file);
    }
}

//funcao de criar janelas
void janela(const char msg[20], int ci, int li, int cf, int lf, int corL, int corF) {
    int i;    
    textcolor(corL);
    textbackground(corF);
    
    for (i = ci; i <= cf; i++) { 
        gotoxy(i, li);
        printf("%c", 205);
        gotoxy(i, lf);
        printf("%c", 205);
    }
    for (i = li; i <= lf; i++) { 
        gotoxy(ci, i); printf("%c", 186);
        gotoxy(cf, i); printf("%c", 186);
    }   
    
    gotoxy(ci, li);  printf("%c", 201);
    gotoxy(cf, li);  printf("%c", 187);
    gotoxy(ci, lf);  printf("%c", 200);
    gotoxy(cf, lf);  printf("%c", 188);
    
    gotoxy(ci + 2, li);
    printf("%s", msg);
    textcolor(15);
    textbackground(0);   
}

//funcao para limpar a tela
void limpa(int ci, int li, int cf, int lf){
	for (int i = li; i <= lf; i++) {
        gotoxy(ci, i);
        for (int j = ci; j <= cf; j++) {
            printf(" "); 
        }
    }
}

//funcao de login
void login(){

	int i = 0,tentativas = 0, tipo;
	bool achar = false;
	janela(" \t\tLOGIN\t\t ", 30,5,80,25,15,10);
	while(tentativas < 3 && !achar){
		gotoxy(32,8);printf("                                        ");
		gotoxy(32,9);printf("                                        ");
		gotoxy(32,8);printf("Digite seu usuario: ");
		gets(user);
		gotoxy(32,9);printf("Digite sua senha: ");
		gets(senha);
		
		for(i=0; i< total_cadastros; i++){
	        if(strcmp(cadastro[i][0], user) == 0 && strcmp(cadastro[i][1], senha) == 0){
	        	achar = true;
				if(strcmp(cadastro[i][2],"1") == 0){
					tipo = 1;
				} else if(strcmp(cadastro[i][2], "2") == 0){
					tipo = 2;
				}
	        	break;
			}
		}

		if(achar){
			limpa(30,5,80,25);
			gotoxy(32,10);printf("Login bem sucedido! Seja bem vindo %s!", user);
			sleep(1.5);
			gotoxy(32,10);printf("                                          ");
			if(tipo == 1){
				gotoxy(1,1);printf("Logado como: %s",user);
				menuAdmin();
			} else if(tipo == 2){
				gotoxy(1,1);printf("Logado como: %s",user);
				menuUser();
			}
			break;
		} else {
			tentativas++;
			gotoxy(32,10);printf("Usuario nao encontrado!");
			sleep(2);
			gotoxy(32,10);printf("                           ");
		}
	}
}

//funcao do menu administrativo
void menuAdmin(){
	char tecla;
	janela (" Menu ",8,8,27,17,15,10);
    do{  
	textcolor(15);
    textbackground(10);
    gotoxy(12,10); printf("  Incluir   ");
    gotoxy(12,11); printf("  Alterar   ");
    gotoxy(12,12); printf("  Excluir   ");
    gotoxy(12,13); printf("  Listar    ");
    gotoxy(12,14); printf("  Creditos  ");
    gotoxy(12,15); printf("  Fim       ");
    textcolor(4);
    textbackground(15);
    switch (op){
    	case 1:
        	gotoxy(12,10); printf("  Incluir   "); break; 
    	case 2:
        	gotoxy(12,11); printf("  Alterar   "); break; 
    	case 3:
        	gotoxy(12,12); printf("  Excluir   "); break; 
    	case 4:
        	gotoxy(12,13); printf("  Listar    "); break; 
      case 5:
        	gotoxy(12,14); printf("  Creditos  "); break;    
      case 6:
        	gotoxy(12,15); printf("  Fim      ");  break; 
    }
	tecla = getch();
        
        if (tecla >= 0 || tecla <= 224) { 
            tecla = getch(); 
            switch (tecla) {
                case 119: // Cima - W
                    op--; 
                    break;
                case 115: // Baixo - S
                    op++;
                    break;
                case 13:
                	switch(op){
                	case 1:
                    	regUsuario();
                    	break;
                	case 2:
                    	// Ação para alterar
                    	alterarUsuarioSenha(1);
                    	break;
                	case 3:
                		// Ação para excluir
						excluiUsuario(cadastro, &total_cadastros, user, 1);
                    	break;
                	case 4:
                		arquivo(0);
                		listar(1);
                    	break;
                	case 5:
                    	// Ação para créditos
						creditos();
                    	break;
					case 6:
						tecla=27;
                		return; // Encerra o menu
                }
        }

        // Ajusta o valor de op
        if (op < 1) op = 6;
        if (op > 6) op = 1;
	}
	}while(tecla!=27);
	
}
void menuUser(){
	char tecla;
	janela (" Menu ",8,8,27,16,15,10);
    do{  
	textcolor(15);
    textbackground(10);
    gotoxy(12,10); printf("  Alterar   ");
    gotoxy(12,11); printf("  Listar    ");
    gotoxy(12,12); printf("  Excluir   ");
    gotoxy(12,13); printf("  Creditos  ");
    gotoxy(12,14); printf("  Fim       ");
    textcolor(4);
    textbackground(15);
    switch (op){
      case 1:
        	gotoxy(12,10); printf("  Alterar   "); break; 
      case 2:
        	gotoxy(12,11); printf("  Listar    "); break; 
      case 3:
        	gotoxy(12,12); printf("  Excluir   "); break; 
      case 4:
        	gotoxy(12,13); printf("  Creditos  "); break;    
      case 5:
        	gotoxy(12,14); printf("  Fim      ");  break; 
    }
	tecla = getch();
        if (tecla >= 0 || tecla <= 224) { 
            tecla = getch(); 
            switch (tecla) {
                case 119: // Cima
                    op--; 
                    break;
                case 115: // Baixo
                    op++;
                    break;
                case 13:
                	switch(op){
                	case 1:
                    	alterarUsuarioSenha(2);
                    	break;
                	case 2:
                		arquivo(0);
                		listar(2);
                    	break;
                	case 3:
                    	// Ação para excluir
                        excluiUsuario(cadastro, &total_cadastros, user, 2); 
                    	break;
                	case 4:
                		// Ação para creditos
                		creditos();
                		break;
					case 5:
						tecla=27;
                		return; // Encerra o menu
                }
        	}

        // Ajusta o valor de op
        if (op < 1) op = 5;
        if (op > 5) op = 1;
	}
	}while(tecla!=27);
	
}
//funcao para registro dos usuarios
void regUsuario(){
	char confirmSenha[50];
	int i;
	bool usuarioExistente;
	do {
	usuarioExistente = false;
	janela("  Registrar novo usuario  ",30,5,80,25,15,10);
	gotoxy(32,8); printf("						");
	gotoxy(32,8); printf("Digite o nome do novo usuario: ");
	gets(cadastro[total_cadastros][0]);
	
	for(i=0;i< total_cadastros;i++){
		if(strcmp(cadastro[i][0], cadastro[total_cadastros][0])==0){
			usuarioExistente = true;
			gotoxy(32, 9); printf("Nome de usuario ja existe! Tente outro.\n");
            sleep(1.5);
            gotoxy(32, 9); printf("                                       "); 
            break;
		}
	}
	} while(usuarioExistente);
	do {
		gotoxy(32,9);printf("                                             ");
		gotoxy(32,9);printf("Digite a senha: ");
		gets(cadastro[total_cadastros][1]);
	}while(!validaSenha(cadastro[total_cadastros][1]));
	do{
		gotoxy(32, 10);printf("                                           "); 
		gotoxy(32,10);printf("Digite a senha novamente: ");
		gets(confirmSenha);
	} while (strcmp(cadastro[total_cadastros][1], confirmSenha) != 0);
	do{
		gotoxy(32,11);printf("Informe o tipo de usuario: ");
		gets(cadastro[total_cadastros][2]);
	}while(cadastro[total_cadastros][2][0] != '1' && cadastro[total_cadastros][2][0] != '2');
	
	total_cadastros++;
	arquivo(1);
	
	gotoxy(32, 23);printf("Usuario cadastrado com sucesso!");
	sleep(1);
	
	limpa(30,5,80,25);
}

//funcao para validar a senha
bool validaSenha(char s[20]){
	bool maiusc = false, minusc=false, especial=false, n=false, t=false;
	int i;
	
	for (i=0;i<strlen(s);i++){
		if (strlen(s) >=8 ){
			t = true;
		}
		if(s[i] >= 48 && s[i] <= 57){
			n = true;
		}
		if((s[i] >= 34 && s[i] <= 47) || (s[i] >= 58 && s[i] <=64) || (s[i] >= 91 && s[i] <= 96) || (s[i]>=123 && s[i] <= 126)){
			especial = true;
		}
		if(s[i] >= 97 && s[i] <= 122){
			minusc = true;
		}
		if(s[i] >= 65 && s[i] <= 90){
			maiusc = true;
		}
	}
	if (t && n && maiusc && minusc && especial) return true;
	else return false;
} 

//funcao alterar usuario
void alterarUsuarioSenha(int tp) {
    char usuario[21], novaSenha[21], confirmSenha[20];
    int encontrado = -1;
	char novoNome[21];
    janela("  Alterar Usuario/Senha  ", 30, 5, 80, 25, 15, 10);
    if (tp == 1){
		gotoxy(32, 8); printf("Digite o nome do usuario: ");
	    gets(usuario);
	
	    // Busca pelo usuário
	    for (int i = 0; i < total_cadastros; i++) {
	        if (strcmp(cadastro[i][0], usuario) == 0) {
	            encontrado = i;
	            break;
	        }
	    }
	
	    if (encontrado == -1) {
	        gotoxy(32, 10); printf("Usuario nao encontrado!");
	        gotoxy(34,22);printf("\n");
			gotoxy(34,23);printf("Pressione ENTER para continuar");
			getchar();
			limpa(30,2,80,25);
	        return;
	    }
	
	    // Alterar nome e senha
	    while(strlen(novoNome)<4){
			gotoxy(32,9);printf("                                        ");
			gotoxy(32, 9); printf("Novo nome de usuario: ");
	    	gets(novoNome);
		}
		strcpy(cadastro[encontrado][0], novoNome);
	    do {
	    	gotoxy(32, 10); printf("                                         ");
	        gotoxy(32, 10); printf("Nova senha: ");
	        gets(novaSenha);
	    } while (!validaSenha(novaSenha));
		do {
			gotoxy(32, 11); printf("                                         ");
	        gotoxy(32, 11); printf("Confirme a nova senha: ");
	        gets(confirmSenha);
		}while (strcmp(novaSenha,confirmSenha)!= 0);
	
	    strcpy(cadastro[encontrado][1], novaSenha);
	    arquivo(1);  // Atualiza o arquivo
	
	    gotoxy(32, 13); printf("Alteracao realizada com sucesso!");
		gotoxy(34,23);printf("Pressione ENTER para continuar");
		getchar();
	}else if(tp == 2){
		for (int i = 0; i < total_cadastros; i++) {
	        if (strcmp(cadastro[i][0], user) == 0) {
	            encontrado = i;
	            break;
	        }
	    }
	    while(strlen(novoNome) < 4){
		    gotoxy(32,9);printf("                                         ");
			gotoxy(32, 9);printf("Novo nome de usuario: ");
		    gets(novoNome);
		}
		strcpy(cadastro[encontrado][0], novoNome);
		do {
	    	gotoxy(32, 10); printf("                                         ");
	        gotoxy(32, 10); printf("Nova senha: ");
	        gets(novaSenha);
	    } while (!validaSenha(novaSenha));
		do {
			gotoxy(32, 11); printf("                                         ");
	        gotoxy(32, 11); printf("Confirme a nova senha: ");
	        gets(confirmSenha);
		}while (strcmp(novaSenha,confirmSenha)!= 0);
	
	    strcpy(cadastro[encontrado][1], novaSenha);
	    arquivo(1);  // Atualiza o arquivo
	
	    gotoxy(32, 13); printf("Alteracao realizada com sucesso!");
		gotoxy(34,23);printf("Pressione ENTER para continuar");
		getchar();
	}	
	limpa(30,2,80,25);
}

//funcao para listar os usuarios
void listar(int tp){
	int x, z;
	char substituir[50];
	if (tp == 1){
	
		janela("   Listando Usuarios e senhas  ",32,2,80,25,15,10);
		
		for(x = 0; x < total_cadastros - 1; x++){
			for (z = x+1; z < total_cadastros; z++){
				if(strcmp(cadastro[x][0], cadastro[z][0]) > 0){
					strcpy(substituir, cadastro[x][0]);
	                strcpy(cadastro[x][0], cadastro[z][0]);
	                strcpy(cadastro[z][0], substituir);
	                
	                strcpy(substituir, cadastro[x][1]);
	                strcpy(cadastro[x][1], cadastro[z][1]);
	                strcpy(cadastro[z][1], substituir);
				}	
			}
		}
		
		gotoxy(34,4);printf("Cadastros:\n");
	    z=6;
		for (x = 0; x < total_cadastros; x++) {
	        gotoxy(34,z);printf("%s\t\t\t%s\n", cadastro[x][0],cadastro[x][1]);
	    	z++;
		}
	    
		gotoxy(34,23);printf("Pressione ENTER para continuar");
		getchar();
		limpa(32,2,80,25);
	} else if(tp == 2){
		
		janela("   Listando Usuarios   ",32,2,80,25,15,10);
		
		for(x = 0; x < total_cadastros - 1; x++){
			for (z = x+1; z < total_cadastros; z++){
				if(strcmp(cadastro[x][0], cadastro[z][0]) > 0){
					strcpy(substituir, cadastro[x][0]);
	                strcpy(cadastro[x][0], cadastro[z][0]);
	                strcpy(cadastro[z][0], substituir);
				}	
			}
		}
		gotoxy(34,4);printf("Cadastros:\n");
	    z=6;
		for (x = 0; x < total_cadastros; x++) {
	        gotoxy(34,z);printf("%s\n", cadastro[x][0]);
	    	z++;
		}
		gotoxy(34,23);printf("Pressione ENTER para continuar");
		getchar();
		limpa(32,2,80,25);
	}
}
void excluiUsuario(char cadastro[20][3][20], int *total_cadastros, char usuarioLogado[21], int tipoUsuario) {
    char usuario[21];
    int encontrado = -1;
    char confirmacao;

    if (tipoUsuario == 2) {
        // Usuário comum exclui a si mesmo
        strcpy(usuario, usuarioLogado);
        janela("EXCLUIR USUARIO", 30, 5, 80, 25, 15, 10);
        gotoxy(32, 9); printf("Deseja excluir o seu usuario? (S/N): ");
        confirmacao = getch();

        if (confirmacao == 'N' || confirmacao == 'n') {
            limpa(30, 5, 80, 25);
            return;
        } else if (confirmacao == 'S' || confirmacao == 's') {
            // Busca e exclui o próprio usuário
            for (int i = 0; i < *total_cadastros; i++) {
                if (strcmp(cadastro[i][0], usuario) == 0) {
                    encontrado = i;
                    break;
                }
            }
            if (encontrado != -1) {
                for (int i = encontrado; i < *total_cadastros - 1; i++) {
                    strcpy(cadastro[i][0], cadastro[i + 1][0]);
                    strcpy(cadastro[i][1], cadastro[i + 1][1]);
                    strcpy(cadastro[i][2], cadastro[i + 1][2]);
                }
                (*total_cadastros)--;
                arquivo(1);  // Atualiza o arquivo com a exclusão

                gotoxy(32, 15); printf("Usuario excluido com sucesso!\n");
                sleep(1.5);
                system("cls");

                // Encerra o programa para o usuário comum
                gotoxy(35, 15); printf("Encerrando o programa...");
                sleep(1);
                exit(0);
            }
        }
    } else if (tipoUsuario == 1) {
        // Usuário administrador exclui outro usuário
        janela("EXCLUIR USUARIO", 30, 5, 80, 25, 15, 10);
        gotoxy(32, 9); printf("Digite o nome do usuario a ser excluido: ");
        scanf(" %[^\n]", usuario);  // Lê o nome do usuário

        // Procura pelo usuário
        for (int i = 0; i < *total_cadastros; i++) {
            if (strcmp(cadastro[i][0], usuario) == 0) {
                encontrado = i;
                break;
            }
        }

        if (encontrado == -1) {
            gotoxy(32, 15); printf("Usuario nao encontrado!\n");
            sleep(1.5);
            limpa(30, 5, 80, 25);
            return;
        }

        // Confirmação para excluir usuário
        gotoxy(32, 11); printf("Confirmar exclusao de %s? (S/N): ", usuario);
        confirmacao = getch();

        if (confirmacao == 'S' || confirmacao == 's') {
            // Exclui o usuário e reorganiza o vetor de forma consistente
            for (int i = encontrado; i < *total_cadastros - 1; i++) {
                // Reorganiza o vetor de cadastros para evitar bagunça nas permissões
                strcpy(cadastro[i][0], cadastro[i + 1][0]);  // Nome
                strcpy(cadastro[i][1], cadastro[i + 1][1]);  // Senha
                strcpy(cadastro[i][2], cadastro[i + 1][2]);  // Tipo
            }
            (*total_cadastros)--;

            // Atualiza o arquivo após a exclusão
            arquivo(1);

            gotoxy(32, 15); printf("Usuario excluido com sucesso!\n");
            sleep(1.5);
            limpa(30, 5, 80, 25);
        } else {
            limpa(30, 5, 80, 25);  // Limpa a tela se a exclusão for cancelada
        }
    }
}

void creditos(){
	janela("	CREDITOS		", 30,5,80,25,15,10);
	gotoxy(32,10);printf("Codigo desenvolvido pelos alunos: ");
	gotoxy(32,11);printf("Miguel Costacurta, Pedro Massaki e Joao Candido");
	gotoxy(32,12);printf("Durante o segundo semestre do curso: ");
	gotoxy(32,13);printf("Engenharia de Software!");

	gotoxy(32,23);printf("Pressione ENTER para continuar");
	getchar();
	limpa(30,5,80,25);
}
